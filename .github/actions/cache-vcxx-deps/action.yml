name: cache-vcxx-deps
description: Handle Dependencies Cache vcxx
inputs:
  arch:
    description: 'Architecture'
    default: ''
    required: false
    type: string
  toolset:
    description: 'Toolset'
    default: ''
    required: false
    type: string
runs:
  using: composite
  steps:
    - name: Cache Optional Dependencies
      uses: "./.github/actions/cache"
      id: cache-deps
      with:
        path: |
          ${{github.workspace}}\zlib 
          ${{github.workspace}}\openssl\${{env.OPENSSL_VERSION}}
          ${{github.workspace}}\openssl\${{env.OPENSSL_ARM_VERSION}}
          ${{github.workspace}}\libssh\${{env.LIBSSH_VERSION}}
          ${{github.workspace}}\libssh\${{env.LIBSSH_VERSION}}-gssapi
          ${{github.workspace}}\libdes\des
          ${{github.workspace}}\libdes\Release
          ${{github.workspace}}\libdes\Debug
          ${{github.workspace}}\tools
          ${{github.workspace}}\kerberos\kfw
          ${{github.workspace}}\rexx\regina
          ${{github.workspace}}\rexx\rexxre
        key: msvc-${{ inputs.toolset }}-${{ inputs.arch }}+zlib-${{env.ZLIB_VERSION}}+openssl-${{env.OPENSSL_VERSION}}+arm-openssl-${{env.OPENSSL_ARM_VERSION}}+${{env.OPENSSL_MAKE}}+libssh-${{env.LIBSSH_VERSION}}+dynamic+regina-${{env.REGINA_VER}}+rexxre+ver3

    - run: mkdir -p zlib
      if: steps.cache-deps.outputs.cache-hit != 'true'
      shell: bash
    - name: Get and unpack zlib
      if: steps.cache-deps.outputs.cache-hit != 'true'
      working-directory: zlib
      run: |
        curl ${{ env.CK_CURL }} -o zlib-${{env.ZLIB_VERSION}}.tar.gz ${{env.ZLIB}}/zlib-${{env.ZLIB_VERSION}}.tar.gz
        7z x zlib-${{env.ZLIB_VERSION}}.tar.gz
        7z x zlib-${{env.ZLIB_VERSION}}.tar
        rm -f zlib-${{env.ZLIB_VERSION}}.tar zlib-${{env.ZLIB_VERSION}}.tar.gz
        mv zlib-${{env.ZLIB_VERSION}} ${{env.ZLIB_VERSION}}
      shell: bash
    - run: mkdir -p libssh
      if: steps.cache-deps.outputs.cache-hit != 'true'
      shell: bash
    - name: Get and unpack libssh
      if: steps.cache-deps.outputs.cache-hit != 'true'
      working-directory: libssh
      run: |
        curl ${{ env.CK_CURL }} -o libssh-${{env.LIBSSH_VERSION}}.tar.xz ${{env.LIBSSH_SOURCE}}libssh-${{env.LIBSSH_VERSION}}.tar.xz
        7z x libssh-${{env.LIBSSH_VERSION}}.tar.xz
        7z x libssh-${{env.LIBSSH_VERSION}}.tar
        rm -f libssh-${{env.LIBSSH_VERSION}}.tar libssh-${{env.LIBSSH_VERSION}}.tar.xz
        mv libssh-${{env.LIBSSH_VERSION}} ${{env.LIBSSH_VERSION}}
        mkdir -p ${{env.LIBSSH_VERSION}}/build
      shell: bash
    - name: Get and unpack libdes
      if: steps.cache-deps.outputs.cache-hit != 'true'
      uses: "./.github/actions/libdes-get"
    - name: Get and unpack nasm
      if: steps.cache-deps.outputs.cache-hit != 'true'
      uses: "./.github/actions/nasm-get"
    - name: Get and unpack jom
      if: steps.cache-deps.outputs.cache-hit != 'true'
      uses: "./.github/actions/jom-get"
    - run: mkdir -p kerberos
      if: steps.cache-deps.outputs.cache-hit != 'true'
      shell: bash
    - name: Get and unpack KFW
      if: steps.cache-deps.outputs.cache-hit != 'true'
      working-directory: kerberos
      run: |
        echo "Get KFW..."
        if [ "${{ inputs.arch }}" = "x86" ]; then
          echo "x86 platform: ${{ env.KFW_x86 }}"
          curl ${{ env.CK_CURL }} -o kfw.msi ${{ env.KFW_x86 }}
        else
          echo "x86-64 platform: ${{ env.KFW_x86 }}"
          curl ${{ env.CK_CURL }} -o kfw.msi ${{ env.KFW_x86_64 }}
        fi
      shell: bash
    - name: install KFW
      if: steps.cache-deps.outputs.cache-hit != 'true'
      working-directory: kerberos
      run: |
        start-process msiexec -argumentlist "/a kfw.msi /qn TARGETDIR=${{github.workspace}}\kerberos\kfw" -wait
        dir ${{github.workspace}}\kerberos\kfw
      shell: powershell
    - name: Get and unpack openssl
      if: steps.cache-deps.outputs.cache-hit != 'true' && (inputs.arch == 'x64_arm' || inputs.arch == 'x64_arm64')
      uses: "./.github/actions/openssl-get"
      with:
        id: 'arm'
    - name: Get and unpack openssl
      if: steps.cache-deps.outputs.cache-hit != 'true' && ! (inputs.arch == 'x64_arm' || inputs.arch == 'x64_arm64')
      uses: "./.github/actions/openssl-get"
    - run: mkdir -p rexx/regina
      if: steps.cache-deps.outputs.cache-hit != 'true'
      shell: bash
    - name: Get and unpack rexx
      if: steps.cache-deps.outputs.cache-hit != 'true'
      working-directory: rexx
      run: |
        # Get Regina REXX
        curl ${{ env.CK_CURL }} -o regina.zip ${{env.REGINA_REXX}}
        7z x regina.zip -oregina
        rm -f regina.zip
        ls -la regina
        
        # Get RexxRE
        curl ${{ env.CK_CURL }} -o rexxre.zip ${{env.REXXRE}}
        7z x rexxre.zip
        rm -f rexxre.zip
      shell: bash

    - name: Build zlib (x86/x86-64)
      if: steps.cache-deps.outputs.cache-hit != 'true' && (inputs.arch == 'x86' || inputs.arch == 'x64')
      working-directory: zlib\${{env.ZLIB_VERSION}}
      run: |
        cmake .
        nmake -f win32\Makefile.msc
      shell: cmd

    - name: Build zlib (arm32/arm64)
      if: steps.cache-deps.outputs.cache-hit != 'true' && (inputs.arch == 'x64_arm' || inputs.arch == 'x64_arm64')
      working-directory: zlib\${{env.ZLIB_VERSION}}
      run: |
        cmake . -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=Release
        nmake
      shell: cmd

    - name: Build openssl (x86)
      if: steps.cache-deps.outputs.cache-hit != 'true' && inputs.arch == 'x86'
      working-directory: openssl\${{env.OPENSSL_VERSION}}
      run: |
        set PATH=%PATH%;${{github.workspace}}\tools\jom;${{github.workspace}}\tools\nasm
        echo %PATH%
        perl Configure VC-WIN32 zlib-dynamic --with-zlib-include=${{github.workspace}}\zlib\${{env.ZLIB_VERSION}} ${{env.OPENSSL_EXTRA_BUILD_FLAGS}}
        
        REM The linker by default marks the subsystem version too high for XP
        REM and there isn't a way to fix that from the configure script, so
        REM do it the hard way.
        sed -i "s/subsystem:console/subsystem:console,5.01/g" makefile
        
        ${{env.OPENSSL_MAKE}}
      shell: cmd

    - name: Build openssl (x86-64)
      if: steps.cache-deps.outputs.cache-hit != 'true' && inputs.arch == 'x64'
      working-directory: openssl\${{env.OPENSSL_VERSION}}
      run: |
        set PATH=%PATH%;${{github.workspace}}\tools\jom;${{github.workspace}}\tools\nasm
        echo %PATH%
        perl Configure VC-WIN64A zlib-dynamic --with-zlib-include=${{github.workspace}}\zlib\${{env.ZLIB_VERSION}} ${{env.OPENSSL_EXTRA_BUILD_FLAGS}}
        
        REM The linker by default marks the subsystem version too high for XP
        REM and there isn't a way to fix that from the configure script, so
        REM do it the hard way.
        sed -i "s/subsystem:console/subsystem:console,5.01/g" makefile
        
        ${{env.OPENSSL_MAKE}}
      shell: cmd

    - name: Build openssl (ARM)
      if: steps.cache-deps.outputs.cache-hit != 'true' && inputs.arch == 'x64_arm'
      working-directory: openssl\${{env.OPENSSL_ARM_VERSION}}
      run: |
        set PATH=%PATH%;${{github.workspace}}\tools\jom;${{github.workspace}}\tools\nasm
        echo %PATH%
        perl Configure VC-WIN32-ARM zlib-dynamic --with-zlib-include=${{github.workspace}}\zlib\${{env.ZLIB_VERSION}} ${{env.OPENSSL_EXTRA_BUILD_FLAGS}} 
        
        ${{env.OPENSSL_MAKE}}
      shell: cmd

    - name: Build openssl (ARM-64)
      if: steps.cache-deps.outputs.cache-hit != 'true' && inputs.arch == 'x64_arm64'
      working-directory: openssl\${{env.OPENSSL_ARM_VERSION}}
      run: |
        set PATH=%PATH%;${{github.workspace}}\tools\jom;${{github.workspace}}\tools\nasm
        echo %PATH%
        perl Configure VC-WIN64-ARM zlib-dynamic --with-zlib-include=${{github.workspace}}\zlib\${{env.ZLIB_VERSION}} ${{env.OPENSSL_EXTRA_BUILD_FLAGS}}    
        ${{env.OPENSSL_MAKE}}
      shell: cmd

    - name: Build libssh (x86/x86-64, Vista+)
      if: steps.cache-deps.outputs.cache-hit != 'true' && (inputs.arch == 'x86' || inputs.arch == 'x64')
      env:
        ROOT: ${{ github.workspace }}
      working-directory: libssh
      run: |
        set openssl_root_override=${{github.workspace}}\openssl\${{env.OPENSSL_VERSION}}
        set zlib_root_override=${{github.workspace}}\zlib\${{env.ZLIB_VERSION}}

        call ..\setenv.bat
        
        REM /M - output directory for binaries and libraries (Move to)
        REM /C - clean build
        REM /R - release build
        REM /W - build for Windows Vista or newer (not XP)
        
        call build.bat /M out /C /R /W ${{env.LIBSSH_VERSION}}
      shell: cmd

    - name: Build libssh (x86/x86-64, Vista+, GSSAPI)
      if: steps.cache-deps.outputs.cache-hit != 'true' && (inputs.arch == 'x86' || inputs.arch == 'x64')
      env:
        ROOT: ${{ github.workspace }}
      working-directory: libssh
      run: |
        set openssl_root_override=${{github.workspace}}\openssl\${{env.OPENSSL_VERSION}}
        set zlib_root_override=${{github.workspace}}\zlib\${{env.ZLIB_VERSION}}
        set k4w_root_override=${{github.workspace}}\kerberos\kfw\Kerberos

        call ..\setenv.bat
        
        REM /M - output directory for binaries and libraries (Move to)
        REM /N - Name suffix  (eg, "/N g" produces "sshg.dll" and "sshg.lib")
        REM /G - GSSAPI build
        REM /C - clean build
        REM /R - release build
        REM /W - build for Windows Vista or newer (not XP)
        
        call build.bat /M out /N g /G /C /R /W ${{env.LIBSSH_VERSION}}
      shell: cmd

    - name: Build libssh (x86/x86-64, XP)
      if: steps.cache-deps.outputs.cache-hit != 'true' && (inputs.arch == 'x86' || inputs.arch == 'x64') && (inputs.toolset == '14.0' || inputs.toolset == '14.1' || inputs.toolset == '14.2')
      env:
        ROOT: ${{ github.workspace }}
      working-directory: libssh
      run: |
        set openssl_root_override=${{github.workspace}}\openssl\${{env.OPENSSL_VERSION}}
        set zlib_root_override=${{github.workspace}}\zlib\${{env.ZLIB_VERSION}}

        call ..\setenv.bat
        
        REM /M - output directory for binaries and libraries (Move to)
        REM /N - Name suffix  (eg, "/N x" produces "sshx.dll" and "sshx.lib")
        REM /G - GSSAPI build
        REM /C - clean build
        REM /R - release build
        REM /X - build for Windows XP (removes a low impact security fix in 0.10.6, and disables thread local storage)        
        
        call build.bat /M out /N x /C /R /X ${{env.LIBSSH_VERSION}}    
      shell: cmd

    - name: Build libssh (x86/x86-64, XP, GSSAPI)
      if: steps.cache-deps.outputs.cache-hit != 'true' && (inputs.arch == 'x86' || inputs.arch == 'x64') && (inputs.toolset == '14.0' || inputs.toolset == '14.1' || inputs.toolset == '14.2')
      env:
        ROOT: ${{ github.workspace }}
      working-directory: libssh
      run: |
        set openssl_root_override=${{github.workspace}}\openssl\${{env.OPENSSL_VERSION}}
        set zlib_root_override=${{github.workspace}}\zlib\${{env.ZLIB_VERSION}}
        set k4w_root_override=${{github.workspace}}\kerberos\kfw\Kerberos

        call ..\setenv.bat
        
        REM /M - output directory for binaries and libraries (Move to)
        REM /N - Name suffix  (eg, "/N xg" produces "sshxg.dll" and "sshxg.lib")
        REM /G - GSSAPI build
        REM /C - clean build
        REM /R - release build
        REM /X - build for Windows XP (removes a low impact security fix in 0.10.6, and disables thread local storage)     
        
        call build.bat /M out /N gx /G /C /R /X ${{env.LIBSSH_VERSION}}    
      shell: cmd

      # zlib is currently disabled for ARM builds as it doesn't currently build for ARM
      # On ARM32 we've got to specify the list of standard libraries ourselves as for some unknown reason advapi32.lib gets left off by default.
    - name: Build libssh (arm32)
      if: steps.cache-deps.outputs.cache-hit != 'true' && inputs.arch == 'x64_arm'
      working-directory: libssh\${{env.LIBSSH_VERSION}}\build
      run: |
        cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=Release -DOPENSSL_ROOT_DIR=${{github.workspace}}\openssl\${{env.OPENSSL_ARM_VERSION}}\ -DZLIB_ROOT:PATH=${{github.workspace}}\zlib\${{env.ZLIB_VERSION}} -DWITH_DSA=ON -DCMAKE_C_STANDARD_LIBRARIES="kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib"
        nmake
      shell: cmd

      # zlib is currently disabled for ARM builds as it doesn't currently build for ARM
    - name: Build libssh (arm64)
      if: steps.cache-deps.outputs.cache-hit != 'true' && inputs.arch == 'x64_arm64'
      working-directory: libssh\${{env.LIBSSH_VERSION}}\build
      run: |
        cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=Release -DOPENSSL_ROOT_DIR=${{github.workspace}}\openssl\${{env.OPENSSL_ARM_VERSION}}\ -DZLIB_ROOT:PATH=${{github.workspace}}\zlib\${{env.ZLIB_VERSION}} -DWITH_DSA=ON
        nmake        
      shell: cmd

    - name: Build libdes
      if: steps.cache-deps.outputs.cache-hit != 'true'
      uses: "./.github/actions/libdes-build"
      with:
        arch: ${{ inputs.arch }}
        id: 'latest'

    - name: Build Regina REXX (x86)
      if: steps.cache-deps.outputs.cache-hit != 'true' && inputs.arch == 'x86'
      working-directory: rexx\regina
      run: |
        set REGINA_SRCDIR=${{github.workspace}}\rexx\regina
        set PLATFORM=x86
        
        nmake -f makefile.win.vc
        if not exist regina.dll exit /b 1
        
        mkdir include
        cd include
        copy ..\rexxsaa.h
        cd ..
        mkdir lib
        cd lib
        copy ..\regina.lib
        cd ..
        
        echo Building RexxRE
        cd %REGINA_SRCDIR%\..\rexxre
        patch -p1 < ..\rexxre.patch
        nmake -f Makefile.NT
        if not exist rexxre.dll exit /b 1
        cd ..
      shell: cmd

    - name: Build Regina REXX (x86-64)
      if: steps.cache-deps.outputs.cache-hit != 'true' && inputs.arch == 'x64'
      working-directory: rexx\regina
      run: |
        set REGINA_SRCDIR=${{github.workspace}}\rexx\regina
        set PLATFORM=x64
        
        nmake -f makefile.win.vc
        if not exist regina.dll exit /b 1
        
        mkdir include
        cd include
        copy ..\rexxsaa.h
        cd ..
        mkdir lib
        cd lib
        copy ..\regina.lib
        cd ..
        
        echo Building RexxRE
        cd %REGINA_SRCDIR%\..\rexxre
        patch -p1 < ..\rexxre.patch
        nmake -f Makefile.NT
        if not exist rexxre.dll exit /b 1
        cd ..        
      shell: cmd

#    TODO: Regina REXX 3.9.6 doesn't support being cross-compiled to
#          an incompatible target architecture:
#
#       .\trexx D:\a\ckwin\ckwin\rexx\regina\common\fixrc.rexx D:\a\ckwin\ckwin\rexx\regina\rexxwinexe.rc .\rexxexe.rc 3.9.6 arm64 regina "29 Apr 2024"
#      NMAKE : fatal error U1045: spawn failed for '.\trexx.EXE' : 0x800700d8
#              This version of %1 is not compatible with the version of Windows
#              you're running. Check your computer's system information and then
#              contact the software publisher.
#
#    - name: Build Regina REXX (arm64)
#      if: steps.cache-deps.outputs.cache-hit != 'true' && inputs.arch == 'x64_arm64'
#      working-directory: rexx\regina
#      run: |
#        set REGINA_SRCDIR=${{github.workspace}}\rexx\regina
#        set PLATFORM=arm64
#
#        nmake -f makefile.win.vc
#        if not exist regina.dll exit /b 1
#
#        mkdir include
#        cd include
#        copy ..\rexxsaa.h
#        cd ..
#        mkdir lib
#        cd lib
#        copy ..\regina.lib
#        cd ..
#
#        echo Building RexxRE
#        cd %REGINA_SRCDIR%\..\rexxre
#        patch -p1 < ..\rexxre.patch
#        nmake -f Makefile.NT
#        cd ..
#      shell: cmd
