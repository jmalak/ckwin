name: Full Build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

env:
  ZLIB_VERSION: 1.3.1
  # Expected filename: https://github.com/openssl/openssl/releases/download/openssl-${{env.CK_OPENSSL_VERSION}}/openssl-${{env.CK_OPENSSL_VERSION}}.tar.gz
  OPENSSL_VERSION: 3.4.0
  # OpenSSL 3.0 and 3.1 aren't properly compatible with Windows on ARM, so we've
  # got to use 3.2 or newer for that.
  OPENSSL_ARM_VERSION: 3.4.0
  # Use JOM instead of nmake for parallel builds
  # Make tool for openssl builds. Jom works fine with OpenSSL 1.1.1 but is broken with 3.0.10.
  # If jom works ideally we use that as it results in shorter build times.
  OPENSSL_MAKE: nmake
  # Any extra build flags for OpenSSL. -FS is required if using Jom.
  # and -D"_WIN32_WINNT=0x502" is required for targeting Windows XP
  OPENSSL_EXTRA_BUILD_FLAGS: -D"_WIN32_WINNT=0x502" -FS
  LIBSSH_VERSION: 0.10.6
  # Grab it from ftp.zx.net.nz as its normally distributed via sourceforge
  # with its annoying interstitial advertising page
  REGINA_VERSION: 3.9.6
  # These are the binaries we expect to be generated by any standard build of K95
  # This includes the core applications plus the telnet crypto and XYZ-MODEM DLLs.
  # ctl3dins.exe is not currently included but perhaps should be.
  STANDARD_BUILD_OUTPUTS: k95.exe iksd.exe iksdsvc.exe k95d.exe rlogin.exe telnet.exe textps.exe k95g.exe k95crypt.dll p95.dll
  # And these are what we currently expect from standard builds for OS/2
  OS2_BUILD_OUTPUTS: k2.exe k2clip.exe k2dc.exe rlogin.exe telnet.exe telnetpm.exe textps.exe p2.dll nullssh.dll
  # Where to get the latest official C-Kermit for UNIX/Linux/MacOS X from
  # along with its version. The version is only used as a cache key to ensure
  # we're not hammering the kermit website or fetching code thats newer than
  # what K95 is currently based on.
  C_KERMIT_VERSION: 10.0beta11
  #C_KERMIT_CODE: https://www.kermitproject.org/ftp/kermit/test/tar/x.tar.gz
  C_KERMIT_CODE: https://kermitproject.org/ftp/kermit/pretest/x.tar.gz

jobs:
  Get-CACerts-Bundle:
    name: Get CA certificates bundle
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Fetch CA Certs bundle
        uses: "./.github/actions/cacert-get"
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ca_certs
          path: |
            *.pem
            *.readme
            *.license
          retention-days: 1

  Prepare-Docs:
    name: Prepare documentation
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: HTMLise Markdown Docs
        working-directory: ${{ github.workspace }}
        run: |
          pip3 install markdown
          (
          echo ^<html^>
          echo ^<head^>^<title^>Kermit 95 SSH Readme^</title^>^</head^>
          echo ^<body^>
          ) > ssh-readme.html
          (
          echo ^<html^>
          echo ^<head^>^<title^>Kermit 95 Change-Log^</title^>^</head^>
          echo ^<body^>
          ) > change-log.html
          python -m markdown -x markdown.extensions.fenced_code ${{ github.workspace }}\doc\ssh-readme.md >> ssh-readme.html
          python -m markdown -x markdown.extensions.fenced_code ${{ github.workspace }}\doc\changes.md >> change-log.html
          (
          echo ^</body^>
          echo ^</html^>
          ) >> change-log.html
          (
          echo ^</body^>
          echo ^</html^>
          ) >> ssh-readme.html
        shell: cmd
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: markdown-docs
          path: |
            change-log.html
            ssh-readme.html
          retention-days: 1

  Build-Wart:
    name: Build Wart (x86)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Enable Developer Command Prompt
        # You may pin to the exact commit or the version.
        # uses: ilammy/msvc-dev-cmd@d8610e2b41c6d0f0c3b4c46dad8df0fd826c68e1
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x86
      - name: Build ckwart
        working-directory: ${{ github.workspace }}\kermit\k95\
        env:
          ROOT: ${{ github.workspace }}
        run: |
          call ${{ github.workspace }}\setenv.bat

          nmake /nologo /e /f ckoker.mak ckwart.exe
          if not exist ckwart.exe exit /b 1
          move ckwart.exe ..\..\ckwart.exe
        shell: cmd
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: wart-x86
          path: ${{ github.workspace }}\ckwart.exe
          if-no-files-found: error
          retention-days: 1

  ##############################################################################
  # Build with Visual C++ 14.x (2015/2017/2019/2022)                           #
  ##############################################################################
  # This includes the latest compilers available (2022), plus the most recent
  # capable of still targeting Windows XP (2017). All support x86, x86-64, ARM32
  # and ARM64.
  Build-VisualCxx:
    name: Build Visual C++
    runs-on: windows-latest
    needs: [Get-CACerts-Bundle, Prepare-Docs, Build-Wart]
    strategy:
      matrix:
        arch:
          - x86
          - x64
          - x64_arm
          - x64_arm64
        toolset:
          # Note: the 14.0 toolset doesn't really work (just results in 14.4)
          - 14.2
          - 14.4

    steps:
    - uses: actions/checkout@v4
    - name: Select env configuration
      run: |
        if [[ "${{ matrix.arch }}" = "x64_arm" || "${{ matrix.arch }}" = "x64_arm64" ]]; then
          echo "CK_OPENSSL_VERSION=${{ env.OPENSSL_ARM_VERSION }}" >> "$GITHUB_ENV"
          echo "CK_K4W_PATH=." >> "$GITHUB_ENV"
        else
          echo "CK_OPENSSL_VERSION=${{ env.OPENSSL_VERSION }}" >> "$GITHUB_ENV"
          echo "CK_K4W_PATH=kerberos\current\Kerberos" >> "$GITHUB_ENV"
        fi
      shell: bash
    # temporary setup Windows SDK version for 32-bit ARM to 10.0.22621.0 because
    # latest SDK version 10.0.26100.0 doesn't contains 32-bit ARM files
    - name: Enable Developer Command Prompt
      if: matrix.arch == 'x64_arm'
      # You may pin to the exact commit or the version.
      # uses: ilammy/msvc-dev-cmd@d8610e2b41c6d0f0c3b4c46dad8df0fd826c68e1
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.arch }}
        toolset: ${{ matrix.toolset }}
        sdk: '10.0.22621.0'
        #spectre: # set true to use VC libraries with sepctre mitigations
    - name: Enable Developer Command Prompt
      if: matrix.arch != 'x64_arm'
      # You may pin to the exact commit or the version.
      # uses: ilammy/msvc-dev-cmd@d8610e2b41c6d0f0c3b4c46dad8df0fd826c68e1
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.arch }}
        toolset: ${{ matrix.toolset }}
        #sdk:   # use the latest
        #spectre: # set true to use VC libraries with sepctre mitigations

      ##########################################################################
      # Build optional dependencies (zlib, openssl, libssh)                    #
      ##########################################################################
    - name: Cache Optional Dependencies
      uses: "./.github/actions/cache-vcxx-deps"
      with:
        arch: ${{ matrix.arch }}
        toolset: ${{ matrix.toolset }}
        id: 'latest'
        nocache: ${{ vars.NOCACHE }}

    - name: Fetch x86 wart
      uses: actions/download-artifact@v4
      if: matrix.arch != 'x86' && matrix.arch != 'x64'
      with:
        name: wart-x86
        path: ${{ github.workspace }}

      ##########################################################################
      # Build K95, K95G and other bits for redistribution                      #
      ##########################################################################
    - name: Full Build
      env:
        ROOT: ${{ github.workspace }}
      working-directory: kermit
      run: |
        set k4w_root_override=${{github.workspace}}\${{ env.CK_K4W_PATH }}
        set openssl_root_override=${{github.workspace}}\openssl\current
        set zlib_root_override=${{github.workspace}}\zlib\current
        set libssh_root_override=${{github.workspace}}\libssh\current
        set libssh_build_override=%libssh_root_override%\build
        set rexx_root_override=${{github.workspace}}\rexx\regina\
        
        call ${{ github.workspace }}\setenv.bat
        
        set PATH=%PATH%;${{github.workspace}}\tools\jom
        set MAKE=jom
        
        REM Don't make PDBs as it causes intermittent problems with JOM that
        REM /FS *should* solve, but seemingly doesn't.
        REM TODO: Take another look at this sometime and see if we can fix it
        REM       properly.
        set CKB_MAKE_PDB=no
        
        REM If the target arch is incompatible with the host arch, use
        REM the x86 version of ckwart.exe which should have been placed
        REM in the workplace previously, rather than trying to use a
        REM version of wart built for the target architecture.
        if "%CKB_CROSS_COMPATIBLE%" == "no" set CKB_USE_WART=yes
        if "%CKB_CROSS_COMPATIBLE%" == "no" set WART=${{github.workspace}}\ckwart.exe
        
        cd p95
        call mknt.bat
        cd ..\k95

        REM We only do dynamic SSH for x86 and x86-64 as at this time ARM only
        REM has the single non-GSSAPI SSH backend to choose from.
        if "%CKB_TARGET_ARCH%" == "x86" goto :build_ssh_dlls
        if "%CKB_TARGET_ARCH%" == "AMD64" goto :build_ssh_dlls
        goto :build_main        
        
        REM Support and build multiple SSH backends
        :build_ssh_dlls
        echo Enabling Dynamic SSH support
        set CKF_DYNAMIC_SSH=yes
        
        REM Vista+, GSSAPI-enabled
        set SSH_LIB=sshg.lib
        set CKF_SSH_DLL_VARIANT=g
        call mksshdll.bat
        ren k95ssh.dll k95sshg.dll
        ren k95ssh.pdb k95sshg.pdb
        del k95ssh.res
        
        if "%CKB_XP_COMPATIBLE%" NEQ "yes" goto :noxp
        REM XP only, no-GSSAPI
        set SSH_LIB=sshx.lib
        set CKF_SSH_DLL_VARIANT=x
        call mksshdll.bat
        ren k95ssh.dll k95sshx.dll
        ren k95ssh.pdb k95sshx.pdb
        del k95ssh.res
        
        REM XP, GSSAPI-enabled
        set SSH_LIB=sshgx.lib
        set CKF_SSH_DLL_VARIANT=gx
        call mksshdll.bat
        ren k95ssh.dll k95sshgx.dll
        ren k95ssh.pdb k95sshgx.pdb
        del k95ssh.res
        
        :noxp
        REM Vista+, no-GSSAPI
        REM built as part of the regular build (mk.bat)
        set SSH_LIB=ssh.lib
        set CKF_SSH_DLL_VARIANT=
        
        :build_main
        call mk.bat

        call mkdist.bat
        
        REM Check outputs
        set MISSING_BUILD_RESULTS=
        for %%y in (${{env.STANDARD_BUILD_OUTPUTS}}) do (
          if not exist dist\%%y echo Build result not found: %%y
          if not exist dist\%%y set MISSING_BUILD_RESULTS=%MISSING_BUILD_RESULTS% %%y
          if not exist dist\%%y set FAILED=yes
        )

        if "%MISSING_BUILD_RESULTS%" NEQ "" echo Missing build outputs: %MISSING_BUILD_RESULTS%
        if "%MISSING_BUILD_RESULTS%" NEQ "" echo One or more expected outputs are missing - failing build
        if "%MISSING_BUILD_RESULTS%" NEQ "" exit /b 1
      shell: cmd

    - name: Fetch CA Certs bundle
      uses: actions/download-artifact@v4
      with:
        name: ca_certs
        path: ${{ github.workspace }}\kermit\k95\dist

    - name: Fetch Docs
      uses: actions/download-artifact@v4
      with:
        name: markdown-docs
        path: ${{ github.workspace }}\kermit\k95\dist

    - name: Prepare Artifact
      run: |
        move kermit\k95\dist ckwin
      shell: cmd

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: k95-vc${{ matrix.toolset }}-${{ matrix.arch }}
        path: ${{ github.workspace }}\ckwin
        if-no-files-found: error
        retention-days: 7

  ##############################################################################
  # Build with Windows 7 Platform SDK version 7.1 (Visual C++ 2010)            #
  ##############################################################################
  # This is the last compiler that can target Itanium. Due to its lack of C99
  # support, builds with Visual C++ 2010 and older don't include SSH support.
  # OpenSSL 1.1.1t is supported however.
  Build-PSDK71:
    name: Build with PSDK 7.1
    runs-on: windows-latest
    needs: [Get-CACerts-Bundle, Prepare-Docs, Build-Wart]
    strategy:
      matrix:
        arch:
          - ia64
          #- x86
          #- x64

    steps:
      - uses: actions/checkout@v4
      - name: Select env configuration
        run: echo "CK_OPENSSL_VERSION=${{ env.OPENSSL_VERSION }}" >> "$GITHUB_ENV"
        shell: bash
        ##########################################################################
        # Fetch/Get/Install the Compiler + dependencies                          #
        ##########################################################################
      - name: Cache Compiler dependencies
        uses: "./.github/actions/cache-psdk71-vc10"
        with:
          arch: ${{ matrix.arch }}
          id: 'psdk71'
          nocache: ${{ vars.NOCACHE }}

      - name: Install the Visual C++ 2010 Runtime
        working-directory: ${{ github.workspace }}
        run: vcredist_x86.exe /q /norestart
        shell: cmd

        ##########################################################################
        # Build optional dependencies (openssl, libdes)                          #
        ##########################################################################
      - name: Cache Optional Dependencies
        uses: "./.github/actions/cache-psdk71-deps"
        with:
          arch: ${{ matrix.arch }}
          id: 'psdk71'
          nocache: ${{ vars.NOCACHE }}

      - name: Fetch x86 wart
        uses: actions/download-artifact@v4
        if: matrix.arch == 'ia64'
        with:
          name: wart-x86
          path: ${{ github.workspace }}

        ##########################################################################
        # Build K95, K95G and other bits for redistribution                      #
        ##########################################################################
      - name: Full Build
        env:
          ROOT: ${{ github.workspace }}
        working-directory: ${{ github.workspace }}
        run: |         
          echo Configure Platform SDK Build Environment...
          SET PlatformToolset=100

          call ${{ github.workspace }}\vc10.cmd /release /xp /${{matrix.arch}}
          
          echo Configure build environment...
          set openssl_root_override=${{github.workspace}}\openssl\current

          call ${{ github.workspace }}\setenv.bat
          
          set PATH=%PATH%;${{github.workspace}}\tools\jom
          set MAKE=jom
          
          if "%CKB_CROSS_COMPATIBLE%" == "no" set CKB_USE_WART=yes
          if "%CKB_CROSS_COMPATIBLE%" == "no" set WART=${{github.workspace}}\ckwart.exe
          
          echo Run Build...
          cd kermit\p95
          call mknt.bat
          cd ..\k95
          call mk.bat
          call mkdist.bat
          
          echo Check outputs...
          set MISSING_BUILD_RESULTS=
          for %%y in (${{env.STANDARD_BUILD_OUTPUTS}}) do (
            if not exist dist\%%y echo Build result not found: %%y
            if not exist dist\%%y set MISSING_BUILD_RESULTS=%MISSING_BUILD_RESULTS% %%y
            if not exist dist\%%y set FAILED=yes
          )
          
          if "%MISSING_BUILD_RESULTS%" NEQ "" echo Missing build outputs: %MISSING_BUILD_RESULTS%
          if "%MISSING_BUILD_RESULTS%" NEQ "" echo One or more expected outputs are missing - failing build
          if "%MISSING_BUILD_RESULTS%" NEQ "" exit /b 1
        shell: cmd

      - name: Fetch CA Certs bundle
        uses: actions/download-artifact@v4
        with:
          name: ca_certs
          path: ${{ github.workspace }}\kermit\k95\dist

      - name: Fetch Docs
        uses: actions/download-artifact@v4
        with:
          name: markdown-docs
          path: ${{ github.workspace }}\kermit\k95\dist

      # Builds with Visual C++ 2010 don't support SSH so don't need the SSH Readme
      - name: Remove SSH Readme
        run: del ${{ github.workspace }}\kermit\k95\dist\ssh-readme.html
        shell: cmd

      - name: Prepare Artifact
        working-directory: ${{ github.workspace }}\kermit\k95
        run: |
          move dist ${{ github.workspace }}\ckwin
        shell: cmd
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: k95-vc10-${{ matrix.arch }}
          path: ${{ github.workspace }}\ckwin
          if-no-files-found: error
          retention-days: 7


  ###############################################################################
  # Build with Open Watcom 1.9 which allows targeting older versions of Windows #
  ###############################################################################
  # It is also likely to be upset by the same sorts of things as Visual C++ 6
  # which reduces the likelihood of accidentally breaking that compiler.
  Build-OpenWatcom19-Win32:
    name: Build by Open Watcom 1.9 (Win32)
    runs-on: windows-latest
    needs: Prepare-Docs
    steps:
    - uses: actions/checkout@v4

    - name: Open Watcom setup
      uses: open-watcom/setup-watcom@v0
      with:
        version: "1.9"
      # Cache Open Watcom because it takes quite a while to download and
      # decompress.
    - name: Cache openzinc
      uses: "./.github/actions/cache"
      id: cache-openzinc
      with:
        path: |
          ${{github.workspace}}\zinc
        key: openzinc1
        nocache: ${{ vars.NOCACHE }}

    - name: Get and unpack openzinc
      if: steps.cache-openzinc.outputs.cache-hit != 'true'
      uses: "./.github/actions/openzinc-get"

    - name: Full Build
      env:
        ROOT: ${{ github.workspace }}
      working-directory: ${{ github.workspace }}
      run: |
        call ${{ github.workspace }}\setenv.bat
        
        REM Enable Dynamic SSH just to be sure those bits are buildable
        REM with Open Watcom
        set CKF_SSH=yes
        set CKF_DYNAMIC_SSH=yes
        
        cd kermit\p95
        call mknt.bat
        cd ..\k95
        call mk.bat
        
        call mkdist.bat
        
        
        REM Check outputs
        REM ctl3d.exe
        set MISSING_BUILD_RESULTS=
        
        REM Can't use STANDARD_BUILD_OUTPUTS as we're not building k95crypt.dll
        REM here for some reason.
        for %%y in (k95.exe iksd.exe iksdsvc.exe k95d.exe rlogin.exe telnet.exe textps.exe k95g.exe p95.dll) do (
          if not exist dist\%%y echo Build result not found: %%y
          if not exist dist\%%y set MISSING_BUILD_RESULTS=%MISSING_BUILD_RESULTS% %%y
          if not exist dist\%%y set FAILED=yes
        )

        if "%MISSING_BUILD_RESULTS%" NEQ "" echo Missing build outputs: %MISSING_BUILD_RESULTS%
        if "%MISSING_BUILD_RESULTS%" NEQ "" echo One or more expected outputs are missing - failing build
        if "%MISSING_BUILD_RESULTS%" NEQ "" exit /b 1
      shell: cmd
    - name: Dialer Build
      env:
        ROOT: ${{ github.workspace }}
      working-directory: ${{ github.workspace }}
      run: |
        call ${{ github.workspace }}\setenv.bat

        cd kermit\dialer
        call mk.bat
        call mkdist.bat
        
        set MISSING_BUILD_RESULTS=

        for %%y in (k95dial.exe k95regtl.exe) do (
          if not exist dist\%%y echo Build result not found: %%y
          if not exist dist\%%y set MISSING_BUILD_RESULTS=%MISSING_BUILD_RESULTS% %%y
          if not exist dist\%%y set FAILED=yes
        )

        if "%MISSING_BUILD_RESULTS%" NEQ "" echo Missing build outputs: %MISSING_BUILD_RESULTS%
        if "%MISSING_BUILD_RESULTS%" NEQ "" echo One or more expected outputs are missing - failing build
        if "%MISSING_BUILD_RESULTS%" NEQ "" exit /b 1
      shell: cmd
    - name: Prepare Artifacts
      working-directory: ${{ github.workspace }}\kermit\k95
      run: |
        move dist ${{ github.workspace }}\ckwin
        move ..\dialer\dist ${{ github.workspace }}\dialer
      shell: cmd

    - name: Fetch Docs
      uses: actions/download-artifact@v4
      with:
        name: markdown-docs
        path: ${{ github.workspace }}\ckwin

      # ctl3dins is a utility for installing ctl3d32 and, in some cases,
      # the Visual C++ runtime. Builds of the Dialer done with Open Watcom
      # can't use ctl3d32 (it a Visual C++ thing), and they don't need the
      # Visual C++ runtime, so ctl3dins.exe serves no purpose here. Even
      # worse, Microsoft AntiVirus frequently misdetects it as being a
      # virus (Trojan:Win32/Wacatac.B!ml) making the artifact difficult
      # to download. So... just exclude ctl3dins from OpenWatcom-built
      # artifacts.
    - name: Remove ctl3dins.exe
      run: del ${{ github.workspace }}\ckwin\ctl3dins.exe
      shell: cmd

      # Open Watcom builds don't include SSH so don't need the SSH Readme
    - name: Remove SSH Readme
      run: del ${{ github.workspace }}\ckwin\ssh-readme.html
      shell: cmd

    - name: Upload K95 Artifact
      uses: actions/upload-artifact@v4
      with:
        name: k95-ow1.9-x86
        path: ${{ github.workspace }}\ckwin
        if-no-files-found: error
        retention-days: 7
    - name: Upload Dialer Artifact
      uses: actions/upload-artifact@v4
      with:
        name: dialer-ow1.9-x86
        path: ${{ github.workspace }}\dialer
        if-no-files-found: error
        retention-days: 7

  Build-OpenWatcom19-Win32-NT-legacy:
    name: Build by Open Watcom 1.9 (NT legacy)
    runs-on: windows-latest
    needs: Prepare-Docs

    steps:
      - uses: actions/checkout@v4

      - name: Open Watcom setup
        uses: open-watcom/setup-watcom@v0
        with:
          version: "1.9"
      - name: Full Build
        env:
          ROOT: ${{ github.workspace }}
        working-directory: ${{ github.workspace }}\kermit
        run: |
          REM Build for Windows NT 3.50 (and, someday, NT 3.1)
          set CKT_NT31=yes
          
          call ${{ github.workspace }}\setenv.bat

          cd p95
          call mknt.bat
          cd ..\k95
          call mk.bat
          
          call mkdist.bat
          
          REM Check outputs
          REM ctl3d.exe
          set MISSING_BUILD_RESULTS=
          
          REM Can't use STANDARD_BUILD_OUTPUTS as we're not building k95crypt.dll
          REM here for some reason.
          for %%y in (k95.exe iksd.exe iksdsvc.exe k95d.exe rlogin.exe telnet.exe textps.exe k95g.exe p95.dll) do (
          if not exist dist\%%y echo Build result not found: %%y
          if not exist dist\%%y set MISSING_BUILD_RESULTS=%MISSING_BUILD_RESULTS% %%y
          if not exist dist\%%y set FAILED=yes
          )
  
          if "%MISSING_BUILD_RESULTS%" NEQ "" echo Missing build outputs: %MISSING_BUILD_RESULTS%
          if "%MISSING_BUILD_RESULTS%" NEQ "" echo One or more expected outputs are missing - failing build
          if "%MISSING_BUILD_RESULTS%" NEQ "" exit /b 1
        shell: cmd

      - name: Fetch Docs
        uses: actions/download-artifact@v4
        with:
          name: markdown-docs
          path: ${{ github.workspace }}\ckwin

      # ctl3dins is a utility for installing ctl3d32 and, in some cases,
      # the Visual C++ runtime. Builds of the Dialer done with Open Watcom
      # can't use ctl3d32 (it a Visual C++ thing), and they don't need the
      # Visual C++ runtime, so ctl3dins.exe serves no purpose here. Even
      # worse, Microsoft AntiVirus frequently misdetects it as being a
      # virus (Trojan:Win32/Wacatac.B!ml) making the artifact difficult
      # to download. So... just exclude ctl3dins from OpenWatcom-built
      # artifacts.
      - name: Remove ctl3dins.exe
        run: del ${{ github.workspace }}\ckwin\ctl3dins.exe
        shell: cmd

        # Open Watcom builds don't include SSH so don't need the SSH Readme
      - name: Remove SSH Readme
        run: del ${{ github.workspace }}\ckwin\ssh-readme.html
        shell: cmd

      - name: Prepare Artifact
        working-directory: ${{ github.workspace }}\kermit\k95
        run: |
          move dist ${{ github.workspace }}\ckwin
        shell: cmd
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: k95-ow1.9-x86-nt350
          path: ${{ github.workspace }}\ckwin
          if-no-files-found: error
          retention-days: 7

  ##############################################################################
  # Build C-Kermit for OS/2 with Open Watcom 1.9 which can cross-compile       #
  ##############################################################################
  Build-OpenWatcom19-OS2:
    name: Build by Open Watcom 1.9 (OS/2)
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Open Watcom setup
        uses: open-watcom/setup-watcom@v0
        with:
          version: "1.9"
      - name: Cache dependencies
        uses: "./.github/actions/cache"
        id: cache-dependencies
        with:
          path: |
            ${{github.workspace}}\zinc
            ${{github.workspace}}\info-zip
            ${{github.workspace}}\toolkit
          key: openzinc1+infozip+os2tk45
          nocache: ${{ vars.NOCACHE }}
      - name: Get OS/2 toolkit 4.5
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        uses: "./.github/actions/os2tk45-get"
      - name: Get Info-zip
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        uses: "./.github/actions/info-zip-get"
      - name: Get and unpack openzinc
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        uses: "./.github/actions/openzinc-get"
      - name: Kermit/2 Build
        env:
          ROOT: ${{ github.workspace }}
        working-directory: ${{ github.workspace }}
        run: |
          set ibm20dir_override=${{ github.workspace }}\toolkit\OS2TK45

          call ${{ github.workspace }}\setenv.bat
          
          REM Enable Dynamic SSH just to be sure those bits are buildable
          REM for OS/2 with Open Watcom
          set CKF_SSH=yes
          set CKF_DYNAMIC_SSH=yes
          
          REM Don't build the libssh backend though - that hasn't been ported 
          REM to OS/2 yet
          set CKF_SSH_BACKEND=no
          
          cd kermit\p95
          call mkos2.bat
          
          cd ..\k95
          call mkos2.bat
          
          call mkdist-os2.bat
          
          REM Check outputs
          set MISSING_BUILD_RESULTS=
          for %%y in (${{env.OS2_BUILD_OUTPUTS}}) do (
            if not exist dist-os2\%%y echo Build result not found: %%y
            if not exist dist-os2\%%y set MISSING_BUILD_RESULTS=%MISSING_BUILD_RESULTS% %%y
            if not exist dist-os2\%%y set FAILED=yes
          )

          if "%MISSING_BUILD_RESULTS%" NEQ "" echo Missing build outputs: %MISSING_BUILD_RESULTS%
          if "%MISSING_BUILD_RESULTS%" NEQ "" echo One or more expected outputs are missing - failing build
          if "%MISSING_BUILD_RESULTS%" NEQ "" exit /b 1
        shell: cmd
      - name: Dialer Build
        env:
          ROOT: ${{ github.workspace }}
        working-directory: ${{ github.workspace }}
        run: |
          call ${{ github.workspace }}\setenv.bat

          cd kermit\dialer
          call mkos2.bat
        shell: cmd
      - name: Make Dialer Distribution
        env:
          ROOT: ${{ github.workspace }}
        working-directory: ${{ github.workspace }}\kermit\dialer
        run: mkdist-os2.bat
        shell: cmd
      - name: Prepare Artifact
        working-directory: ${{ github.workspace }}\kermit\k95
        run: |
          move ..\dialer\dist-os2\* dist-os2\
          move dist-os2 ${{ github.workspace }}\ckos2
          cd ${{ github.workspace }}\ckos2
          
          echo Making full distribution archive K2PACK.EXE
          ${{ github.workspace }}\info-zip\zip.exe -r -5 -v -o k2pack * -x setup.exe
          copy /b ${{ github.workspace }}\info-zip\os2\unzipsfx.exe + k2pack.zip K2PACK.EXE
          del k2pack.zip
          mkdir ${{ github.workspace }}\dist-full
          move K2PACK.EXE ${{ github.workspace }}\dist-full\
          copy setup.exe ${{ github.workspace }}\dist-full\
          
          echo Making minimal distribution
          REM This is basically everything but the dialer. Its small enough to fit on a
          REM single floppy disk alongisde setup.exe
          ${{ github.workspace }}\info-zip\zip.exe -r -5 -v -o k2pack-mini k2.* k2clip.exe cko32*.dll p*.dll pcfonts.dll rlogin.exe telnetpm*.exe textps.exe docs download eas icons keymaps phones printer public scripts tmp users
          copy /b ${{ github.workspace }}\info-zip\os2\unzipsfx.exe + k2pack-mini.zip K2PACK.EXE
          del k2pack-mini.zip
          mkdir ${{ github.workspace }}\dist-mini
          move K2PACK.EXE ${{ github.workspace }}\dist-mini\
          copy setup.exe ${{ github.workspace }}\dist-mini\
        shell: cmd

      - name: Upload Zip Artifact
        uses: actions/upload-artifact@v4
        with:
          name: k2-ow1.9-x86
          path: ${{ github.workspace }}\ckos2
          if-no-files-found: error
          retention-days: 7
      - name: Upload Full Installer Artifact
        uses: actions/upload-artifact@v4
        with:
          name: k2-full-install
          path: ${{ github.workspace }}\dist-full
          if-no-files-found: error
          retention-days: 7
      - name: Upload Minimal Installer Artifact
        uses: actions/upload-artifact@v4
        with:
          name: k2-mini-install
          path: ${{ github.workspace }}\dist-mini
          if-no-files-found: error
          retention-days: 7

  ##############################################################################
  # Build with Visual C++ 2003 Toolkit + Windows Server 2003 SP1 Platform SDK  #
  ##############################################################################
  # This is the oldest freely available compiler from Microsoft. The bits come
  # from the Visual C++ 2003 Toolkit, the Windows Server 2003 SP1 Platform SDK
  # as described here:
  # https://epics.anl.gov/base/msvctk.php
  Build-VCT2003-PSDK2003:
    name: Build with PSDK 2003 by Visual C++ 2003
    runs-on: windows-latest
    needs: [Get-CACerts-Bundle, Prepare-Docs]
    strategy:
      matrix:
        arch:
          - 'x86'
        # Do a build using ancient and insecure libraries like libsrp, k4w
        # and SuperLAT? This is *purely* for checking support with these
        # otherwise rarely tested build options doesn't get accidentlaly
        # broken.
        legacy_dependencies:
          - yes
          - no
    steps:
      - uses: actions/checkout@v4

      # We need this only to get cvtres.exe which didn't come with either the
      # Visual C++ 2003 Toolkit or the Windows Server 2003 SP1 Platform SDK.
      - name: Enable Developer Command Prompt
        # You may pin to the exact commit or the version.
        # uses: ilammy/msvc-dev-cmd@d8610e2b41c6d0f0c3b4c46dad8df0fd826c68e1
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x86
          toolset: 14.0

        # Cache the Visual C++ 2003 Toolkit & Platform SDK because it takes
        # quite a while to download and decompress and I don't want my FTP
        # server being hit constantly to download this whenever a build runs.
      - name: Cache VCT2003
        uses: "./.github/actions/cache-vct2003-deps"
        with:
          nocache: ${{ vars.NOCACHE }}

      - name: Cache VCT2003 legacy
        if: matrix.legacy_dependencies == 'yes'
        uses: "./.github/actions/cache-vct2003-legacy-deps"
        with:
          nocache: ${{ vars.NOCACHE }}

      - name: Full Build
        env:
          ROOT: ${{ github.workspace }}
        working-directory: ${{ github.workspace }}
        run: |
          Set PATH=${{ github.workspace }}\vct2003\bin;%PATH%
          set openssl_root_override=${{ github.workspace }}\openssl\current
          set srp_root_override=${{ github.workspace }}\srp-2.1.2
          set k4w_root_override=${{ github.workspace }}\kerberos\current\src
          
          REM Don't want to pick up headers or libraries from Visual C++ 14.0
          REM which is also on here - we only want it for cvtres.exe.
          set INCLUDE=${{ github.workspace }}\vct2003\include
          set LIB=${{ github.workspace }}\vct2003\lib
          
          call ${{ github.workspace }}\setenv.bat

          Set PATH=%PATH%;${{github.workspace}}\tools\jom
          set MAKE=jom
                   
          REM The Visual C++ 2003 Toolkit can only statically link the C Runtime
          REM (though apparently you can get the required import library for
          REM dynamic linking from the .NET SDK 1.1)
          set CKB_STATIC_CRT_NT=yes

          cd kermit
          
          echo Building p95...
          cd p95
          call mknt.bat
          
          echo Building K95...
          cd ..\k95
          call mk.bat
          
          call mkdist.bat
          
          REM Check outputs
          set MISSING_BUILD_RESULTS=
          REM ctl3dins.exe
          for %%y in (k95.exe iksd.exe iksdsvc.exe k95d.exe rlogin.exe telnet.exe textps.exe k95g.exe p95.dll) do (
            if not exist dist\%%y echo Build result not found: %%y
            if not exist dist\%%y set MISSING_BUILD_RESULTS=%MISSING_BUILD_RESULTS% %%y
            if not exist dist\%%y set FAILED=yes
          )

          if "%MISSING_BUILD_RESULTS%" NEQ "" echo Missing build outputs: %MISSING_BUILD_RESULTS%
          if "%MISSING_BUILD_RESULTS%" NEQ "" echo One or more expected outputs are missing - failing build
          if "%MISSING_BUILD_RESULTS%" NEQ "" exit /b 1
        shell: cmd

      - name: Full Build Non-standard configs
        env:
          ROOT: ${{ github.workspace }}
          VCT2003: ${{ github.workspace }}\vct2003
        working-directory: ${{ github.workspace }}
        run: |
          Set PATH=${{ github.workspace }}\vct2003\bin;%PATH%
          set openssl_root_override=${{ github.workspace }}\openssl\current
          set srp_root_override=${{ github.workspace }}\srp-2.1.2
          set k4w_root_override=${{ github.workspace }}\kerberos\current\src
          
          REM Don't want to pick up headers or libraries from Visual C++ 14.0
          REM which is also on here - we only want it for cvtres.exe.
          set INCLUDE=${{ github.workspace }}\vct2003\include
          set LIB=${{ github.workspace }}\vct2003\lib
          
          call ${{ github.workspace }}\setenv.bat
          
          Set PATH=%PATH%;${{github.workspace}}\tools\jom
          set MAKE=jom
          
          REM The Visual C++ 2003 Toolkit can only statically link the C Runtime
          REM (though apparently you can get the required import library for
          REM dynamic linking from the .NET SDK 1.1)
          set CKB_STATIC_CRT_NT=yes

          cd kermit\k95
          
          echo Cleaning...
          call clean.bat
          
          echo Building kui...
          call mkkui.bat
          
          mkdir dist-misc
          move *.exe dist-misc          
          
          REM Check outputs
          set MISSING_BUILD_RESULTS=
          for %%y in (cknkui.exe) do (
            if not exist dist-misc\%%y echo Build result not found: %%y
            if not exist dist-misc\%%y set MISSING_BUILD_RESULTS=%MISSING_BUILD_RESULTS% %%y
            if not exist dist-misc\%%y set FAILED=yes
          )

          if "%MISSING_BUILD_RESULTS%" NEQ "" echo Missing build outputs: %MISSING_BUILD_RESULTS%
          if "%MISSING_BUILD_RESULTS%" NEQ "" echo One or more expected outputs are missing - failing build
          if "%MISSING_BUILD_RESULTS%" NEQ "" exit /b 1
        shell: cmd

      - name: Check additional legacy outputs
        if: matrix.legacy_dependencies == 'yes'
        working-directory: ${{ github.workspace }}\kermit\k95
        run: |
          REM Check outputs
          set MISSING_BUILD_RESULTS=
          REM TODO: srp-tconf.exe srp-passwd.exe
          REM TODO: Kerberos bits
          for %%y in (k95crypt.dll) do (
            if not exist dist\%%y echo Build result not found: %%y
            if not exist dist\%%y set MISSING_BUILD_RESULTS=%MISSING_BUILD_RESULTS% %%y
            if not exist dist\%%y set FAILED=yes
          )

          if "%MISSING_BUILD_RESULTS%" NEQ "" echo Missing legacy build outputs: %MISSING_BUILD_RESULTS%
          if "%MISSING_BUILD_RESULTS%" NEQ "" echo One or more expected outputs are missing - failing build
          if "%MISSING_BUILD_RESULTS%" NEQ "" exit /b 1
        shell: cmd

      - name: Fetch CA Certs bundle
        if: matrix.legacy_dependencies == 'yes'
        uses: actions/download-artifact@v4
        with:
          name: ca_certs
          path: ${{ github.workspace }}\kermit\k95\dist

      - name: Fetch Docs
        uses: actions/download-artifact@v4
        with:
          name: markdown-docs
          path: ${{ github.workspace }}\kermit\k95\dist

      # Builds with Visual C++ 2003 include SSH so don't need the SSH Readme
      - name: Remove SSH Readme
        run: del ${{ github.workspace }}\kermit\k95\dist\ssh-readme.html
        shell: cmd

      - name: Prepare Artifact
        working-directory: ${{ github.workspace }}\kermit\k95
        run: |
          move dist ${{ github.workspace }}\ckwin
          move dist-misc ${{ github.workspace }}\ckwin-extra
        shell: cmd
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        if: matrix.legacy_dependencies == 'no'
        with:
          name: k95-vc7.1-x86
          path: ${{ github.workspace }}\ckwin
          if-no-files-found: error
          retention-days: 7
      - name: Upload Artifact (extra)
        uses: actions/upload-artifact@v4
        if: matrix.legacy_dependencies == 'no'
        with:
          name: k95-vc7.1-x86-extra
          path: ${{ github.workspace }}\ckwin-extra
          if-no-files-found: error
          retention-days: 7
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        if: matrix.legacy_dependencies == 'yes'
        with:
          name: k95-vc7.1-x86-insecure
          path: ${{ github.workspace }}\ckwin
          if-no-files-found: error
          retention-days: 7
      - name: Upload Artifact (extra)
        uses: actions/upload-artifact@v4
        if: matrix.legacy_dependencies == 'yes'
        with:
          name: k95-vc7.1-x86-insecure-extra
          path: ${{ github.workspace }}\ckwin-extra
          if-no-files-found: error
          retention-days: 7


  ##############################################################################
  # Build for Itanium with the Windows Server 2003 SP1 Platform SDK            #
  ##############################################################################
  # This uses Visual C++ 2005
  #
  Build-PSDK2003SP1:
    name: Build with PSDK 2003 SP1
    runs-on: windows-latest
    needs: [Prepare-Docs, Build-Wart]
    strategy:
      matrix:
        arch:
          - 'ia64'

    steps:
      - uses: actions/checkout@v4

      # We need this only to get cvtres.exe which didn't come with either the
      # Visual C++ 2003 Toolkit or the Windows Server 2003 SP1 Platform SDK.
      - name: Enable Developer Command Prompt
        # You may pin to the exact commit or the version.
        # uses: ilammy/msvc-dev-cmd@d8610e2b41c6d0f0c3b4c46dad8df0fd826c68e1
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x86
          toolset: 14.0

      # Cache the Visual C++ 2003 Toolkit & Platform SDK because it takes
      # quite a while to download and decompress and I don't want my FTP
      # server being hit constantly to download this whenever a build runs.
      - name: Cache VCT2003+libdes
        uses: "./.github/actions/cache-vct2003-libdes-deps"
        with:
          nocache: ${{ vars.NOCACHE }}

      - name: Fetch x86 wart
        uses: actions/download-artifact@v4
        with:
          name: wart-x86
          path: ${{ github.workspace }}

      - name: Full Build
        env:
          ROOT: ${{ github.workspace }}
        working-directory: ${{ github.workspace }}
        run: |
          Set PATH=${{github.workspace}}\vct2003\bin\win64;${{github.workspace}}\vct2003\bin;%PATH%
          
          REM Don't want to pick up headers or libraries from Visual C++ 14.0
          REM which is also on here - we only want it for cvtres.exe.
          set INCLUDE=${{github.workspace}}\vct2003\include
          set LIB=${{github.workspace}}\vct2003\lib\ia64
          
          call ${{ github.workspace }}\setenv.bat

          REM Use the supplied x86 build of wart rather than building it for
          REM itanium then fail to run it on the not-itanium build host
          set CKB_USE_WART=yes
          set WART=${{github.workspace}}\ckwart.exe
          
          Set PATH=%PATH%;${{github.workspace}}\tools\jom
          set MAKE=jom
          
          cd kermit\p95
          call mknt.bat
          
          cd ..\k95
          call mk.bat
          
          call mkdist.bat
          
          REM Check outputs
          set MISSING_BUILD_RESULTS=
          for %%y in (${{env.STANDARD_BUILD_OUTPUTS}}) do (
          if not exist dist\%%y echo Build result not found: %%y
          if not exist dist\%%y set MISSING_BUILD_RESULTS=%MISSING_BUILD_RESULTS% %%y
          if not exist dist\%%y set FAILED=yes
          )
  
          if "%MISSING_BUILD_RESULTS%" NEQ "" echo Missing build outputs: %MISSING_BUILD_RESULTS%
          if "%MISSING_BUILD_RESULTS%" NEQ "" echo One or more expected outputs are missing - failing build
          if "%MISSING_BUILD_RESULTS%" NEQ "" exit /b 1
        shell: cmd

      - name: Fetch Docs
        uses: actions/download-artifact@v4
        with:
          name: markdown-docs
          path: ${{ github.workspace }}\kermit\k95\dist

      # Builds with Visual C++ 2005 don't include SSH so don't need the SSH Readme
      - name: Remove SSH Readme
        run: del ${{ github.workspace }}\kermit\k95\dist\ssh-readme.html
        shell: cmd

      - name: Prepare Artifact
        working-directory: ${{ github.workspace }}\kermit\k95
        run: |
          move dist ${{ github.workspace }}\ckwin
        shell: cmd
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: k95-vc8-ia64
          path: ${{ github.workspace }}\ckwin
          if-no-files-found: error
          retention-days: 7

  ##############################################################################
  # Cross-compile for 64bit Windows from Linux with MinGW64                    #
  ##############################################################################
  # Not for release builds. Just to ensure GCC/MinGW compatibility doesn't get
  # broken accidentally.
  #
  Build-MinGW64-Linux:
    name: Build by Mingw (x64) on Linux
    runs-on: ubuntu-latest
    needs: [Get-CACerts-Bundle, Prepare-Docs]
    strategy:
      matrix:
        arch:
          - 'x64'

    steps:
      - uses: actions/checkout@v4
      - name: Install MinGW-w64
        run: sudo apt install -y g++-mingw-w64-x86-64-posix gcc-mingw-w64-x86-64-posix binutils-mingw-w64-x86-64

      - name: Select env configuration
        run: echo "CK_OPENSSL_VERSION=${{ env.OPENSSL_VERSION }}" >> "$GITHUB_ENV"
        shell: bash

      - name: Cache Dependencies
        uses: "./.github/actions/cache-mingw-deps"
        with:
          arch: ${{ matrix.arch }}
          id: 'latest'
          nocache: ${{ vars.NOCACHE }}

      - name: Build
        env:
          CXX: /usr/bin/x86_64-w64-mingw32-c++
          CC: /usr/bin/x86_64-w64-mingw32-gcc
        run: |
          cd kermit/k95
          make -j 2 RC=/usr/bin/x86_64-w64-mingw32-windres OPENSSL=${{github.workspace}}/openssl/current
        shell: bash
      - name: Make Distribution
        shell: bash
        run: |
            pushd kermit/k95
            bash ./mkdist.sh
            popd
            mv kermit/k95/ckwin ./

      - name: Fetch CA Certs bundle
        uses: actions/download-artifact@v4
        with:
          name: ca_certs
          path: ${{ github.workspace }}/ckwin

      - name: Fetch Docs
        uses: actions/download-artifact@v4
        with:
          name: markdown-docs
          path: ${{ github.workspace }}/ckwin

      # We're not currently building libssh on linux so remove the ssh readme
      - name: Remove SSH Readme
        run: rm -f ${{ github.workspace }}/ckwin/ssh-readme.html
        shell: bash

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: k95-mingw64-cross
          path: ${{ github.workspace }}/ckwin
          if-no-files-found: error

  ##############################################################################
  # Build C-Kermit for Linux with the ckwin version of the shared modules      #
  ##############################################################################
  # To ensure any local changes to ckc* and cku* modules haven't accidentally
  # broken C-Kermit on Linux, grab the latest linux code and substitute in
  # our version of these files to check it all still builds.
  #
  # Note that if we get out-of-sync with C-Kermit for UNIX changes this may
  # run into build errors.
  #
  # This also isn't anywhere near a perfect test. Just because this builds
  # doesn't mean we haven't broken something on OpenVMS or Solaris or AIX
  # or Digital UNIX or BSD or MacOS X or any number of other platforms.
  C-Kermit-Linux-Build-Test:
    name: C Kermit Tests (Linux)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libpam-dev openssl libssl-dev

        # Cache the C-Kermit code so that we're not hitting the C-Kermit website
        # for every build.
      - name: Cache code
        uses: "./.github/actions/cache"
        id: cache-code
        with:
          path: |
            ${{github.workspace}}/ckermit
            ${{github.workspace}}/openssl
          key: ${{ runner.os }}-ckermit${{ env.C_KERMIT_VERSION }}-r1
          nocache: ${{ vars.NOCACHE }}
      - name: Get C-Kermit ${{env.C_KERMIT_VERSION}}
        if: steps.cache-code.outputs.cache-hit != 'true'
        run: |
          curl -LsS -o ckermit.tar.gz ${{ env.C_KERMIT_CODE }}
          mkdir -p ckermit
          pushd ckermit
          tar -zxvf ../ckermit.tar.gz
          popd
          rm -f ckermit.tar.gz
        shell: bash
      - name: Copy C-Kermit for Unix files
        run: |
          pushd ckermit
          cp -n ../kermit/k95/cku* ./
          cp -n ../kermit/k95/ckc* ./
          popd
        shell: bash
      - name: Build C-Kermit
        run: |
          pushd ckermit
          chmod +x ckubuildlog
          make clean
          make linux+ssl | tee log
          ./ckubuildlog
          cat linux+ssl.txt
          popd
        shell: bash
